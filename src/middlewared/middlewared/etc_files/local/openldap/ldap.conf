<%
        """
        Note regarding StartTLS and ldaps
        StartTLS is the name of the standard LDAP operation for initiating TLS/SSL. TLS/SSL is initiated upon successful completion of this LDAP operation.
        No alternative port is necessary. It is sometimes referred to as the TLS upgrade operation, as it upgrades a normal LDAP connection to one protected by TLS/SSL.

        ldaps:// and LDAPS refers to "LDAP over TLS/SSL" or "LDAP Secured". TLS/SSL is initated upon connection to an alternative port (normally 636).
        Though the LDAPS port (636) is registered for this use, the particulars of the TLS/SSL initiation mechanism are not standardized.

        Once initiated, there is no difference between ldaps:// and StartTLS. They share the same configuration options and result in like security services being established. 
        """
        def safe_call(*args):
            try:
                val = middleware.call_sync(*args)
            except:
                val = False
            return val

        uri = None
        base = None
        ssl = False
        tls_cacert = None
        tls_reqcert = 'allow'

        ldap = middleware.call_sync('ldap.config')
        ldap_enabled = ldap['enable']

        ad = middleware.call_sync('activedirectory.config')
        ad_enabled = ad['enable']

        if ad['enable'] and ad['idmap_backend'] in ["rfc2307", "ldap"]:
            idmap = middleware.call_sync('idmap.get_or_create_idmap_by_domain', 'DS_TYPE_ACTIVEDIRECTORY')
            base = idmap['ldap_base_dn']
            idmap_url = idmap['ldap_url']
            idmap_url = re.sub('^(ldaps?://)', '', idmap_url)
            uri = "%s://%s" % ("ldaps" if idmap['ssl'] == "ON" else "ldap", idmap_url)
            if idmap['ssl'] in ('start_tls', 'on'):
                cert = safe_call('certificate.query', [('id', '=', idmap['certificate']['id'])], {'get': True})
                tls_cacert = cert['certificate_path']
                ssl = idmap['ssl']
            timeout = ad['timeout']
            network_timeout = ad['dns_timeout']

        elif ldap_enabled and ldap:
            ldap_uri = ["%s://%s" % ("ldaps" if ldap['ssl'] == "ON" else "ldap", x) for x in ldap['hostname']]
            uri = " ".join(ldap_uri)
            base = ldap['basedn']
            timeout = ldap['timeout']
            network_timeout = ldap['dns_timeout']

            if ldap['ssl'] in ("START_TLS", "ON"):
                cert = safe_call('certificate.query', [('id', '=', ldap['certificate']['id'])], {'get': True})
                tls_cacert = cert['certificate_path']
                ssl = ldap['ssl']
%>
% if (ldap_enabled and ldap) or (ad_enabled and ad):
# This file is used by Samba and py-ldap. If NETWORK_TIMEOUT is too high, then ldap failover
# in Samba's ldapsam passdb backend may not occur.
URI ${uri}
BASE ${base}
NETWORK_TIMEOUT ${network_timeout}
TIMEOUT ${timeout}
    % if ssl:
        % if tls_cacert:
TLS_CACERT ${tls_cacert}
        % endif
TLS_REQCERT allow
    % endif
% endif
